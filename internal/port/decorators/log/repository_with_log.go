// Code generated by gowrap. DO NOT EDIT.
// template: ../../templates/log_template.go.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package log

import (
	"context"
	"os"

	"github.com/NoGambiNoBugs/go-observability-examples/internal/entity"
	"github.com/NoGambiNoBugs/go-observability-examples/internal/port"
	"github.com/rs/zerolog"
)

// RepositoryWithLog implements port.Repository that is instrumented with zerolog logger
type RepositoryWithLog struct {
	base port.Repository
}

// InsertCustomer implements port.Repository
func (d RepositoryWithLog) InsertCustomer(ctx context.Context, customer entity.Customer) (err error) {

	nl := zerolog.Ctx(ctx)

	logger := nl.With().Fields(map[string]interface{}{
		"ctx":      ctx,
		"customer": customer}).Logger()

	defer func() {
		if err != nil {
			logger.Error().Fields(map[string]interface{}{
				"err": err}).Err(err).Str("decorator", "RepositoryWithLog").Str("method", "InsertCustomer").Msg("Error detected")
		} else {
			logger.Debug().Fields(map[string]interface{}{
				"err": err}).Str("decorator", "RepositoryWithLog").Str("method", "InsertCustomer").Msg("Finish")
		}
	}()
	return d.base.InsertCustomer(ctx, customer)
}

// NewRepositoryWithLog instruments an implementation of the port.Repository with simple logging
func NewRepositoryWithLog(base port.Repository) port.Repository {
	decorate := os.Getenv("DECORATE")
	if decorate == "true" || decorate == "1" {
		return RepositoryWithLog{
			base: base,
		}
	}

	return base
}
