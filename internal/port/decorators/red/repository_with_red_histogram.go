// Code generated by gowrap. DO NOT EDIT.
// template: ../../templates/red_histogram_template.go.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package red

import (
	"context"
	"fmt"
	"os"
	"strings"
	"time"

	"github.com/NoGambiNoBugs/go-observability-examples/internal/entity"
	"github.com/NoGambiNoBugs/go-observability-examples/internal/port"
	"github.com/prometheus/client_golang/prometheus"
)

var RepositoryWithREDHistogramVec *prometheus.HistogramVec

// RepositoryWithREDHistogram implements port.Repository interface with all methods wrapped with RED Histogram metric
type RepositoryWithREDHistogram struct {
	metricName string
	base       port.Repository
}

// MetricName returns the metric name generated for port.Repository
func (d RepositoryWithREDHistogram) MetricName() string {
	return d.metricName
}

// InsertCustomer implements port.Repository
func (d RepositoryWithREDHistogram) InsertCustomer(ctx context.Context, customer entity.Customer) (err error) {
	since := time.Now()
	defer func() {
		status := "ok"
		if err != nil {
			status = "error"
		}

		labels := prometheus.Labels{
			"status": status,
			"method": "InsertCustomer",
		}

		observer, err := RepositoryWithREDHistogramVec.GetMetricWith(labels)
		if err != nil {
			fmt.Printf("MetricName %s: Error to get metric with labels %v\n", d.metricName, labels)
		}

		observer.Observe(float64(time.Since(since).Milliseconds()))
	}()
	return d.base.InsertCustomer(ctx, customer)
}

// NewRepositoryWithREDHistogram returns an instance of the port.Repository decorated with red histogram metric
func NewRepositoryWithREDHistogram(
	base port.Repository,
	subsystem string,
	constLabels prometheus.Labels,
) (decorator port.Repository, err error) {
	decorateAll := os.Getenv("DECORATE_ALL")
	decorateRED := os.Getenv("DECORATE_RED")
	if !((decorateAll == "true" || decorateAll == "1") || (decorateRED == "true" || decorateRED == "1")) {
		return base, nil
	}

	mNamespace := strings.ToLower(strings.TrimSpace("example"))
	mSubsystem := strings.ToLower(strings.TrimSpace(subsystem))
	mName := strings.ToLower(strings.TrimSpace("repository_red"))

	metricConfig := prometheus.HistogramOpts{
		Namespace:   mNamespace,
		Subsystem:   mSubsystem,
		Name:        mName,
		Help:        "Repository RED histogram (rate, errors and duration).",
		ConstLabels: constLabels,
		Buckets:     prometheus.ExponentialBuckets(100, 2, 5),
	}

	if RepositoryWithREDHistogramVec == nil {
		RepositoryWithREDHistogramVec = prometheus.NewHistogramVec(metricConfig, []string{"status", "method"})
	}

	decorator = RepositoryWithREDHistogram{
		metricName: prometheus.BuildFQName(mNamespace, mName, mSubsystem),
		base:       base,
	}

	return
}
