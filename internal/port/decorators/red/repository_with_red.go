// Code generated by gowrap. DO NOT EDIT.
// template: ../../templates/red_template.go.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package red

import (
	"context"
	"fmt"
	"os"
	"strings"
	"time"

	"github.com/NoGambiNoBugs/go-observability-examples/internal/entity"
	"github.com/NoGambiNoBugs/go-observability-examples/internal/instrumentation"
	"github.com/NoGambiNoBugs/go-observability-examples/internal/port"
	"github.com/prometheus/client_golang/prometheus"
)

type RepositoryWithRED struct {
	base         port.Repository
	histogramVec *prometheus.HistogramVec
}

// InsertCustomer implements port.Repository
func (d RepositoryWithRED) InsertCustomer(ctx context.Context, customer entity.Customer) (err error) {
	since := time.Now()
	defer func() {
		status := "ok"
		if err != nil {
			status = "error"
		}

		labels := prometheus.Labels{
			"status": status,
			"method": "InsertCustomer",
		}

		observer, err := d.histogramVec.GetMetricWith(labels)
		if err != nil {
			fmt.Printf("Metric: Error to get metric with labels %v\n", labels)
		}

		observer.Observe(float64(time.Since(since).Milliseconds()))
	}()
	return d.base.InsertCustomer(ctx, customer)
}

// NewRepositoryWithRED returns an instance of the port.Repository decorated with red histogram metric
func NewRepositoryWithRED(base port.Repository, subsystem string, constLabels prometheus.Labels) (decorator port.Repository, err error) {
	decorate := os.Getenv("DECORATE")
	if !(decorate == "true" || decorate == "1") {
		return base, nil
	}

	metricConfig := prometheus.HistogramOpts{
		Namespace:   strings.TrimSpace("example"),
		Subsystem:   strings.TrimSpace(subsystem),
		Name:        strings.TrimSpace("repository_red"),
		Help:        "Repository RED histogram (rate, errors and duration).",
		ConstLabels: constLabels,
		Buckets:     prometheus.ExponentialBuckets(100, 2, 5),
	}

	red := RepositoryWithRED{
		base:         base,
		histogramVec: prometheus.NewHistogramVec(metricConfig, []string{"status", "method"}),
	}

	err = instrumentation.Registry.Register(red.histogramVec)
	if err != nil {
		return nil, err
	}

	return red, nil
}
